{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["thisPage","Container","fluid","Row","Col","style","textAlign","fontSize","height","width","margin","map","logo","name","path","toLowerCase","replace","Figure","Image","alt","src","borderRadius","Caption","pageLogo","App","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","headerStyle","color","Jumbotron","backgroundImage","backgroundSize","position","marginLeft","top","jumbo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA0GA,SAASA,IAWP,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAbS,CAClBC,UAAW,SACXC,SAAU,MACVC,OAAQ,QAUJ,4BAEF,kBAACL,EAAA,EAAD,CAAKE,MAVa,CACpBI,MAAO,OACPC,OAAQ,WAEO,CAAC,OAAO,MAAM,aAAa,QAAQ,mBAOpCC,KAAI,SAAAC,GAAI,OA/C1B,SAAkBC,GAChB,IAAMC,EAAO,WAAWD,EAAKE,cAAcC,QAAQ,MAAM,IAAI,OAa7D,OACE,kBAACZ,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,CAAQZ,MAbQ,CAClBK,OAAQ,WAaJ,kBAACO,EAAA,EAAOC,MAAR,CACEC,IAAKN,EACLO,IAAKN,EACLT,MAdW,CACjBgB,aAAc,MACdZ,MAAO,UAcH,kBAACQ,EAAA,EAAOK,QAAR,CAAgBjB,MAZD,CACnBC,UAAW,WAYJO,KAwBmBU,CAASX,QAexBY,MATf,WACE,OACI,6BArHI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACrD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAQ,yBACvBZ,IAAI,GACJC,IAAI,eACJX,MAAM,KACND,OAAO,KACPwB,UAAU,8BAGd,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKL,UAAU,WACb,kBAACK,EAAA,EAAIC,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACM,EAAA,EAAIC,KAAL,CAAUP,KAAK,UAAf,SACA,kBAACM,EAAA,EAAIC,KAAL,CAAUP,KAAK,UAAf,aACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWJ,GAAG,2BAC/B,kBAACG,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,cAEF,kBAACM,EAAA,EAAIC,KAAL,CAAUP,KAAK,YAAf,cAMhB,WACE,IAaMW,EAAc,CAClBC,MAAO,QACPpC,SAAU,OAOZ,OAAQ,kBAACqC,EAAA,EAAD,CAAW1C,OAAK,EAACG,MAtBL,CAClBwC,gBAAiB,+EACjBC,eAAgB,QAChBtC,OAAQ,OACRC,MAAO,SAmBC,kBAACR,EAAA,EAAD,CAAWI,MAjBL,CACd0C,SAAU,WACVC,WAAY,OACZvC,MAAO,OACPwC,IAAK,QAcK,wBAAI5C,MAAOqC,GAAX,aACA,wBAAIrC,MAAOqC,GAAX,mBACA,uBAAGrC,MATE,CACfsC,MAAO,QACPpC,SAAU,MACVE,MAAO,SAMG,6HAkELyC,GACAlD,MC1HWmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c47257d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Figure from 'react-bootstrap/Figure';\r\n\r\nfunction navbar() {\r\n  return (<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\"><img\r\n                alt=\"\"\r\n                src=\"/tabIcon.png\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n              />\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                <Nav.Link href=\"#about\">About</Nav.Link>\r\n                <Nav.Link href=\"#about\">Skillsets</Nav.Link>\r\n                <NavDropdown title=\"Projects\" id=\"collasible-nav-dropdown\">\r\n                  <NavDropdown.Item href=\"#action/3.1\">Project 1</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.2\">Project 2</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.3\">Project 3</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <Nav.Link href=\"#contact\">Contact</Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>);\r\n}\r\n\r\nfunction jumbo() {\r\n  const bannerStyle = {\r\n    backgroundImage: 'linear-gradient(rgba(0,0,0,0.25), rgba(0,0,0,0.25)), url(/images/banner.jpg)',\r\n    backgroundSize: 'cover',\r\n    height: \"40vw\",\r\n    width: '100%'\r\n  };\r\n  const textPos = {\r\n    position: 'relative',\r\n    marginLeft: '40vw',\r\n    width: '50vw',\r\n    top: '2vw'\r\n\r\n  };\r\n  const headerStyle = {\r\n    color: 'white',\r\n    fontSize: '5vw'\r\n  }\r\n  const parStyle = {\r\n    color: 'white',\r\n    fontSize: '2vw',\r\n    width: '50vw'\r\n  }\r\n  return (<Jumbotron fluid style={bannerStyle}>\r\n            <Container style={textPos}>\r\n              <h1 style={headerStyle}>Hi there,</h1>\r\n              <h1 style={headerStyle}>my name is Alex</h1>\r\n              <p style={parStyle}>\r\n                Welcome to my personal website where you can learn what I've\r\n                done, what I'm doing, and what I plan to do in the future.\r\n              </p>\r\n            </Container>\r\n          </Jumbotron>\r\n          );\r\n}\r\n\r\nfunction pageLogo(name) {\r\n  const path = \"/images/\"+name.toLowerCase().replace(/\\s/g,'')+\".png\";\r\n\r\n  const figureStyle = {\r\n    margin: '0 auto'\r\n  };\r\n  const imageStyle = {\r\n    borderRadius: \"0px\",\r\n    width: '10vw'\r\n  };\r\n  const captionStyle = {\r\n    textAlign: \"center\"\r\n  };\r\n\r\n  return (\r\n    <Col>\r\n      <Figure style={figureStyle}>\r\n        <Figure.Image\r\n          alt={name}\r\n          src={path}\r\n          style={imageStyle}\r\n        />\r\n        <Figure.Caption style={captionStyle}>\r\n          {name}\r\n        </Figure.Caption>\r\n      </Figure>\r\n    </Col>\r\n  );\r\n}\r\n\r\nfunction thisPage() {\r\n  const headerStyle = {\r\n    textAlign: \"center\",\r\n    fontSize: '3vw',\r\n    height: '8vw'\r\n  };\r\n  const madeWithStyle = {\r\n    width: \"80vw\",\r\n    margin: '0 auto'\r\n  };\r\n  const madeWith = ['HTML','CSS','Javascript','React','React Bootstrap'];\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col style={headerStyle}>This Page Was Made With</Col>\r\n      </Row>\r\n      <Row style={madeWithStyle}>\r\n        {madeWith.map(logo => pageLogo(logo))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n        {navbar()}\r\n        {jumbo()}\r\n        {thisPage()}\r\n      </div>)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}